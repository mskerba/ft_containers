#include "vector.hpp"

/***********************************************/
/*                default constructor          */
/***********************************************/

template<typename T, typename A>
ft::vector<T, A>::vector (const allocator_type& alloc) :__container(nullptr), __size(0), __capacity(0), __alloc(alloc){}

/***********************************************/
/*                fill constructor             */
/***********************************************/

template<typename T, typename A>
ft::vector<T, A>::vector (size_type n, const value_type& val, const allocator_type& alloc): __size(n), __capacity(n), __alloc(alloc)
{
    if (!n)
        return ;
    __container = __alloc.allocate(n);
    for(size_type i = 0; i < __size; i++)
        __alloc.construct(&__container[i], val);
}

/***********************************************/
/*               range constructor             */
/***********************************************/

template<typename T, typename A>
template <class InputIterator> 
ft::vector<T, A>::vector (InputIterator first, InputIterator last, const allocator_type& alloc): __size(last - first), __capacity(__size), __alloc(alloc)
{
    if (size() < 0)
        throw  std::length_error("vector");
    this->__container = __alloc.allocate(this->__size);
    size_type i = -1;
    while (first != last)
        __alloc.construct(&__container[++i], *(first++));
}

/***********************************************/
/*               copy constructor              */
/***********************************************/

template<typename T, typename A>
ft::vector<T, A>::vector(const vector& x): __size(x.__size), __capacity(x.__capacity)
{
    if (!size()) return ;
    this->__container = __alloc.allocate(this->__size);
    for(size_type i = 0; i < this->__size; i++)
        __alloc.construct(&__container[i], x.__container[i]);
}

/***********************************************/
/*                 destructor                  */
/***********************************************/

template<typename T, typename A>
ft::vector<T, A>::~vector()
{
    this->destroyed();
    this->__size = 0;
    this->__capacity = 0;
}

/***********************************************/
/*                 operator=                   */
/***********************************************/

template<typename T, typename A>
ft::vector<T, A>& ft::vector<T, A>::operator= (const ft::vector<T, A>& x)
{
    if(this->size() < x.size())
    {
        this->destroyed();
        this->__container = __alloc.allocate(x.size());
        for (size_t i = 0; i < x.size(); i++)
            __alloc.construct(&__container[i], x.__container[i]);
        this->__size = x.size();
        this->__capacity = x.__capacity;
        return (*this);
    }
    for (size_t i = 0; i < x.size(); i++)
        this->__container[i] = x.__container[i];
    for (size_t i = this->size(); i > x.size() ; i--)
        __alloc.destroy(&this->__container[i - 1]);
    this->__size = x.size();
    return (*this);
}

/***********************************************/
/*                   size                      */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::size_type ft::vector<T, A>::size() const
{
    return (this->__size);
}

/***********************************************/
/*                 max_size                    */
/***********************************************/

template<typename T, typename A>
size_t ft::vector<T, A>::max_size() const
{
    int sizeT = sizeof(T);
    if (sizeT == 1)
        sizeT = 2;
    return (std::numeric_limits<std::size_t>::max() / sizeT);
}

/***********************************************/
/*                   resize                    */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::resize (size_type n, value_type val)
{
    if (n < this->__size)
    {
        for (size_type i = this->__size; i > n; i--)
            this->__alloc.destroy(&__container[i - 1]);
        __size = n;
        return ;
    }
    else if (n < this->capacity())
    {
        for (size_type i = n; i > this->size(); i--)
            __alloc.construct(&__container[i - 1], val);
        this->__size = n;
        return ;
    }
    else if (n > this->capacity())
    {
        pointer newcontainer  = __alloc.allocate(n);
        for (size_type i = this->__size; i < n; i++)
            __alloc.construct(&newcontainer[i], val);

        for (size_type i = this->__size; i > 0; i--)
             __alloc.construct(&newcontainer[i - 1], this->__container[i - 1]);
        this->destroyed();
        __container = newcontainer;
    }
    this->__size = n;
    if (n > this->__capacity && n < 2 * this->__capacity)
        n *= 2;
    this->__capacity = n;
}

/***********************************************/
/*                 capacity                    */
/***********************************************/

template<typename T, typename A>
size_t ft::vector<T, A>::capacity () const
{
    return (this->__capacity);
}

/***********************************************/
/*                   empty                     */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::empty() const
{
    if (this->__size)
        return (false);
    return (true);
}

/***********************************************/
/*                 reserve                     */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::reserve (size_type n)
{
    if (n <= this->__capacity)
        return ;
    pointer newcontainer;

    newcontainer = __alloc.allocate(n);
    for (size_type i = this->__size; i > 0; i--)
        __alloc.construct(&newcontainer[i - 1], this->__container[i - 1]);
    this->destroyed();
    __container = newcontainer;
    __capacity = n;
}

/***********************************************/
/*                shrink_to_fit                */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::shrink_to_fit()
{
    pointer newcontainer;
    newcontainer = __alloc.allocate(__size);
    for (size_type i = this->__size - 1;; i--)
    {
        __alloc.construct(&newcontainer[i], this->__container[i]);
        if (!i) break;
    }
    for (size_type i = this->__size - 1;; i--)
    {
        __alloc.destroy(&this->__container[i]);
        if (!i) break;
    }
    __container = newcontainer;
    __capacity = __size;
}

/***********************************************/
/*                  operator[]                 */
/***********************************************/

template<typename T, typename A>
T& ft::vector<T, A>::operator[] (size_t n)
{
    return (this->__container[n]);
}

template<typename T, typename A>
const T& ft::vector<T, A>::operator[] (size_t n) const
{
    return (this->__container[n]);
}

/***********************************************/
/*                      at                     */
/***********************************************/

template<typename T, typename A>
T& ft::vector<T, A>::at (size_t n)
{
    if (n >= this->size())
        throw std::out_of_range("vector");
    return (this->__container[n]);
}

template<typename T, typename A>
const T& ft::vector<T, A>::at (size_t n) const
{
    if (n >= this->size())
        throw std::out_of_range("vector");
    return (this->__container[n]);
}

/***********************************************/
/*                    front                    */
/***********************************************/

template<typename T, typename A>
T& ft::vector<T, A>::front()
{
    return (this->__container[0]);
}

template<typename T, typename A>
const T& ft::vector<T, A>::front() const
{
    return (this->__container[0]);
}

/***********************************************/
/*                    back                    */
/***********************************************/

template<typename T, typename A>
T& ft::vector<T, A>::back()
{
    return (this->__container[__size - 1]);
}

template<typename T, typename A>
const T& ft::vector<T, A>::back() const
{
    return (this->__container[__size - 1]);
}

/***********************************************/
/*                    data                     */
/***********************************************/

template<typename T, typename A>
T* ft::vector<T, A>::data() throw()
{
    return (__container);
}

template<typename T, typename A>
const T* ft::vector<T, A>::data() const throw()
{
    return (__container);
}

/***********************************************/
/*                 assigner                    */
/***********************************************/

template<typename T, typename A>
template <class InputIterator>
void ft::vector<T, A>::assign (InputIterator first, InputIterator last)
{
    size_type n = last - first;
    if (n < 0)
    {
        this->~vector();
        throw std::length_error("vector");
    }
    if(n > this->__capacity)
    {
        this->destroyed();
        this->__container = this->__alloc.allocate(n);
        this->__capacity = n;
        this->__size = n;
        for(size_type i = 0; i < __size; i++)
            __alloc.construct(&__container[i], *(first++));
        return ;
    }
    for(size_type i = 0; i < n && i < size(); i++)
        __container[i] = *(first++);
    for(size_type i = __size; i > n; i--)
        __alloc.destroy(&this->__container[i - 1]);
    for(size_type i = __size; i < n; i++)
        __alloc.construct(&__container[i], *(first++));
    __size = n;
}

template<typename T, typename A>
void ft::vector<T, A>::assign (size_type n, const value_type& val)
{
    if(n > this->__capacity)
    {
        this->destroyed();
        this->__container = this->__alloc.allocate(n);
        this->__capacity = n;
        this->__size = n;
        for(size_type i = 0; i < __size; i++)
            __alloc.construct(&__container[i], val);
        return ;
    }
    for(size_type i = 0; i < n && i < size(); i++)
        __container[i] = val;
    for(size_type i = __size; i > n; i--)
        __alloc.destroy(&this->__container[i - 1]);
    for(size_type i = __size; i < n; i++)
        __alloc.construct(&__container[i], val);
    __size = n;
}

/***********************************************/
/*                  push_back                  */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::push_back (const value_type& val)
{
    if (__capacity && __capacity - __size)
    {
        this->__alloc.construct(&__container[__size++], val);
        return ;
    }
    pointer newcontainer;
    size_type newcapacity = capacity() * 2;
    if (!newcapacity) newcapacity = 1;
    newcontainer = __alloc.allocate(newcapacity);
    __alloc.construct(&newcontainer[__size], val);
    for (size_type i = this->__size; i; i--)
        __alloc.construct(&newcontainer[i - 1], this->__container[i - 1]);
    this->destroyed();
    __size++;
    __capacity = newcapacity;
    __container = newcontainer;
}

/***********************************************/
/*                 pop_back                    */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::pop_back ()
{
    this->__size--;
    __alloc.destroy(&__container[__size]);
}

/***********************************************/
/*                  insert                     */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::iterator ft::vector<T, A>::insert (typename ft::vector<T, A>::iterator position, const T& val)
{
    difference_type n = position - begin();
    if (this->capacity() == this->size())
    {
        pointer newcontainer;
        size_type newcapacity = capacity();

        newcapacity *= 2;
        if(!newcapacity) newcapacity++;
        newcontainer = __alloc.allocate(newcapacity);
        __alloc.construct(&newcontainer[n], val);
        for (difference_type i = 0; i < n; i++)
            __alloc.construct(&newcontainer[i], __container[i]);
        for (difference_type i = (n + 1); i <= end() - begin(); i++) 
            __alloc.construct(&newcontainer[i], __container[i - 1]);
        if (capacity())
            destroyed();
        __capacity = newcapacity;
        __size++;
        __container = newcontainer;
        return (begin() + n);
    }
    difference_type i = (end() - begin());
    __alloc.construct(&__container[i], __container[i - 1]);
    while (--i > n)
        __container[i] = __container[i - 1];
    *position = val;
    __size++;
    return (begin() + n);
}

template<typename T, typename A>
void ft::vector<T, A>::insert (typename ft::vector<T, A>::iterator position, size_t n, const T& val)
{
    if(!n)
        return;
    difference_type j = position - begin();
    if (this->capacity() < this->size() + n)
    {
        pointer newcontainer;
        size_type newcapacity = capacity() * 2;
        
        if (capacity() < n)
            newcapacity += n - capacity();

        if (!newcapacity) newcapacity = n;
        newcontainer = __alloc.allocate(newcapacity);
        for (difference_type i = 0; i < (difference_type)n; i++ )
            __alloc.construct(&newcontainer[j + i], val);

        for (difference_type i = 0; i < j; i++)
            __alloc.construct(&newcontainer[i], __container[i]);
        for (difference_type i = j; i < (end() - begin()); i++) 
            __alloc.construct(&newcontainer[i + n], __container[i]);
        if (capacity())
            destroyed();
        __capacity = newcapacity;
        __size += n;
        __container = newcontainer;
        return ;
    }
    difference_type i = (end() - begin());
    difference_type e = i - (difference_type)n;
    while (--i >= e)
        __alloc.construct(&__container[i + n], __container[i - 1]);
    while (i >= j)
    {
        __container[i] = __container[i - 1];
        i--;
    }
    for (difference_type k = 0; k < (difference_type)n; k++)
        *(position + k) = val;
    __size += n;
}

template<typename T, typename A>
template <typename InputIterator>
void ft::vector<T, A>::insert (typename ft::vector<T, A>::iterator position, InputIterator first, InputIterator last)
{
    size_t n = last - first;
    if(!n)
        return;
    difference_type j = position - begin();
    if (this->capacity() < this->size() + n)
    {
        pointer newcontainer;
        size_type newcapacity = capacity() * 2;
        
        if (capacity() < n)
            newcapacity += n - capacity();

        if (!newcapacity) newcapacity = n;
        newcontainer = __alloc.allocate(newcapacity);
        for (difference_type i = 0; i < (difference_type)n; i++ )
        {
            __alloc.construct(&newcontainer[j + i], *first);
            first += 1;
        }

        for (difference_type i = 0; i < j; i++)
            __alloc.construct(&newcontainer[i], __container[i]);
        for (difference_type i = j; i < (end() - begin()); i++) 
            __alloc.construct(&newcontainer[i + n], __container[i]);
        if (capacity())
            destroyed();
        __capacity = newcapacity;
        __size += n;
        __container = newcontainer;
        return ;
    }
    difference_type i = (end() - begin());
    difference_type e = i - (difference_type)n;
    while (--i >= e)
        __alloc.construct(&__container[i + n], __container[i - 1]);
    while (i >= j)
    {
        __container[i] = __container[i - 1];
        i--;
    }
    for (difference_type k = 0; k < (difference_type)n; k++)
    {
        *(position + k) = *first;
        first += 1;
    }
    __size += n;
}

/***********************************************/
/*                  erase                     */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::iterator ft::vector<T, A>::erase (typename ft::vector<T, A>::iterator position)
{
    iterator tmp = this->begin() - 1;

    while (tmp != position - 1)   tmp++;

    while ((++tmp) != this->end() - 1)  *tmp = *(tmp + 1);

    this->__alloc.destroy(&__container[--this->__size]);

    return (position);
}

template<typename T, typename A>
typename ft::vector<T, A>::iterator ft::vector<T, A>::erase (typename ft::vector<T, A>::iterator first, ft::vector<T, A>::iterator last)
{
    difference_type n = last - first;
    if (!this->size() || !n) return (first);
    iterator tmp = first;

    while ((tmp + n) != this->end())  *tmp = *(tmp++ + n);
    

    for (difference_type i = this->__size; i >= (end() - last - 1); i--)
        __alloc.destroy(&this->__container[i - 1]);
        this->__size -= n;
    return (first);
}

/***********************************************/
/*                   swap                      */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::swap (ft::vector<T, A>& x)
{
    std::swap(this->__container, x.__container);
    std::swap(this->__size, x.__size);
    std::swap(this->__capacity, x.__capacity);
}

/***********************************************/
/*                  clear                     */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::clear ()
{
    while (1)
    {
        if (!size()) break;
        __alloc.destroy(&this->__container[--(__size)]);
    }
}

/***********************************************/
/*                get_allocator                */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::allocator_type ft::vector<T, A>::get_allocator() const
{
    return (this->__alloc);
}

/***********************************************/
/*                    begin                    */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::iterator ft::vector<T, A>::begin()
{
    return (iterator(this->__container));
}

template<typename T, typename A>
typename ft::vector<T, A>::const_iterator ft::vector<T, A>::begin() const
{
    return (const_iterator(this->__container));
}

/***********************************************/
/*                     end                     */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::iterator ft::vector<T, A>::end()
{
    return (iterator(this->__container + __size));
}

template<typename T, typename A>
typename ft::vector<T, A>::const_iterator ft::vector<T, A>::end() const
{
    return (const_iterator(this->__container + __size));
}

/***********************************************/
/*                   rbegin                    */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::reverse_iterator ft::vector<T, A>::rbegin()
{
    return (reverse_iterator(end()));
}

template<typename T, typename A>
typename ft::vector<T, A>::const_reverse_iterator ft::vector<T, A>::rbegin() const
{
    return (const_reverse_iterator(end()));
}

/***********************************************/
/*                    rend                     */
/***********************************************/

template<typename T, typename A>
typename ft::vector<T, A>::reverse_iterator ft::vector<T, A>::rend()
{

    return (reverse_iterator(begin()));
}

template<typename T, typename A>
typename ft::vector<T, A>::const_reverse_iterator ft::vector<T, A>::rend() const
{
    return (const_reverse_iterator(begin()));
}

/***********************************************/
/*                operator!=                   */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::operator!=(const ft::vector<T, A>& x)
{
    if (this->size() != x.size())
        return (true);
    if (this->capacity() != x.capacity())
        return (true);
    for (size_type i = 0; i < x.size() && i < this->size(); i++)
        if (this->__container[i] != x.__container[i]) return (true);
    return (false);
}

/***********************************************/
/*                operator==                   */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::operator==(const ft::vector<T, A>& x)
{
    if (this->size() != x.size())
        return (false);
    if (this->capacity() != x.capacity())
        return (false);
    for (size_type i = 0; i < x.size() && i < this->size(); i++)
        if (this->__container[i] != x.__container[i]) return (false);
    return (true);
}

/***********************************************/
/*                operator>                    */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::operator> (const ft::vector<T, A>& x)
{
    for (size_type i = 0; i < x.size() && i < this->size(); i++)
    {
        if (this->__container[i] < x.__container[i]) return (false);
        else if (this->__container[i] > x.__container[i]) return (true);
    }
    if (this->size() > x.size()) return (true);
    return (false);
}

/***********************************************/
/*                operator>                    */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::operator< (const ft::vector<T, A>& x)
{
    for (size_type i = 0; i < x.size() && i < this->size(); i++)
    {
        if (this->__container[i] > x.__container[i]) return (false);
        else if (this->__container[i] < x.__container[i]) return (true);
    }
    if (this->size() < x.size()) return (true);
    return (false);
}

/***********************************************/
/*                operator>                    */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::operator>= (const ft::vector<T, A>& x)
{
    for (size_type i = 0; i < x.size() && i < this->size(); i++)
    {
        if (this->__container[i] < x.__container[i]) return (false);
        else if (this->__container[i] > x.__container[i]) return (true);
    }
    if (this->size() >= x.size()) return (true);
    return (false);
}

/***********************************************/
/*                operator>                    */
/***********************************************/

template<typename T, typename A>
bool ft::vector<T, A>::operator<= (const ft::vector<T, A>& x)
{
    for (size_type i = 0; i < x.size() && i < this->size(); i++)
    {
        if (this->__container[i] > x.__container[i]) return (false);
        else if (this->__container[i] < x.__container[i]) return (true);
    }
    if (this->size() <= x.size()) return (true);
    return (false);
}

/***********************************************/
/*                operator>                    */
/***********************************************/

// template <typename T>
// void ft::swap (ft::vector<T, std::allocator<T> >& x, ft::vector<T, std::allocator<T> >& y)
// {
//     x.swap(y);
// }

/***********************************************/
/*             private destroyed               */
/***********************************************/

template<typename T, typename A>
void ft::vector<T, A>::destroyed()
{
    if (__container != nullptr)
    {
        for (size_type i = this->__size;i; i--)
            __alloc.destroy(&this->__container[i - 1]);
        if(this->capacity())
            __alloc.deallocate(__container, this->__capacity);
    }
}

